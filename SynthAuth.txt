package org.vetmaster.model;


import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.util.Enumeration;
import java.util.Vector;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.jar.JarOutputStream;
import org.apache.bcel.classfile.ClassParser;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.generic.ClassGen;
import org.apache.bcel.generic.FieldGen;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionFactory;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.MethodGen;
public class SynthAuth
{
public SynthAuth()
{
  try
  {
   jarFile = new JarFile("data/synthetica.jar");
   Enumeration<?> entries = jarFile.entries();
   while (entries.hasMoreElements())
   {
  JarEntry entry = (JarEntry) entries.nextElement();
  if (entry.getName().endsWith(".class"))
  {
  ClassParser parser = new ClassParser(
     jarFile.getInputStream(entry), entry.getName());
  JavaClass jclass = parser.parse();
  ClassGen generator = new ClassGen(jclass);
  classes.add(generator);
  } else
  properties.add(entry);
   }
   System.out.println("Injecting " + classes.size() + " classes...");
   inject(classes);
  }
  catch (Exception e)
  {
   e.printStackTrace();
  }
}
public void inject(Vector<ClassGen> classPool)
{
  for (int index = 0; index < classPool.size(); index++)
  {
   if (classPool.get(index).getClassName()
  .contains("SyntheticaRootPaneUI"))
   {
  for (Field f : classPool.get(index).getFields())
  {
  if (f.getName().equals("EVAL_TEXT"))
  {
    System.out.println("[" + f.getName() + "] ["
    + f.getConstantValue().toString() + "]");
    FieldGen fieldGen = new FieldGen(f, classPool
    .get(index).getConstantPool());
    fieldGen.setInitValue(" ");
    fieldGen.setName("EVAL_TEXT");
    classPool.get(index).replaceField(f,
    fieldGen.getField());
  }
  }
  for (Method m : classPool.get(index).getMethods())
  {
  if (m.getName().equals("isEvalCopy"))
  {
    MethodGen methodGen = new MethodGen(m, classPool.get(
    index).getClassName(), classPool.get(index)
    .getConstantPool());
    InstructionList list = methodGen.getInstructionList();
    InstructionHandle handle = list.getStart();
    InstructionFactory factory = new InstructionFactory(
    classPool.get(index));
    
    Instruction instruction =  factory.createConstant(Boolean.FALSE);
    handle.setInstruction(instruction);
    methodGen.setInstructionList(list);
    methodGen.setMaxStack();
    methodGen.setMaxLocals();
    methodGen.removeLineNumbers();
    classPool.get(index).replaceMethod(m,
    methodGen.getMethod());
  }
  }
   }
   if (classPool.get(index).getClassName()
  .contains("SyntheticaRootPaneUI"))
   {
  for (Field f : classPool.get(index).getFields())
  {
  if (f.getName().equals("EVAL_TEXT"))
    System.out.println("[" + f.getName() + "] ["
    + f.getConstantValue().toString() + "]");
  }
   }
  }
  dumpInjected(classPool);
}
public void dumpInjected(Vector<ClassGen> pool)
{
  try
  {
   File file = new File("libraries/synthetica2.jar");
   FileOutputStream stream = new FileOutputStream(file);
   JarOutputStream generatedFile = new JarOutputStream(stream);
   for (ClassGen generator : pool.toArray(new ClassGen[pool.size()]))
   {
  JarEntry entry = new JarEntry(generator.getClassName().replace(
    '.', '/')
    + ".class");
  generatedFile.putNextEntry(entry);
  generatedFile.write(generator.getJavaClass().getBytes());
   }
   for (JarEntry entry : properties)
   {
  generatedFile.putNextEntry(entry);
  InputStream input = jarFile.getInputStream(entry);
  byte[] buffer = new byte[2048];
  int bytesRead;
  while ((bytesRead = input.read(buffer)) != -1)
  generatedFile.write(buffer, 0, bytesRead);
   }
   System.out.println("New file successfully written...");
   generatedFile.close();
   stream.close();
  }
  catch (Exception e)
  {
   e.printStackTrace();
  }
}
public static void main(String[] args)
{
  new SynthAuth();
}
private JarFile jarFile;
private Vector<JarEntry> properties = new Vector<JarEntry>();
private Vector<ClassGen> classes = new Vector<ClassGen>();
}